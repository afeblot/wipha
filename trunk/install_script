#!/bin/sh

# /System/Library/CoreServices/ServerVersion.plist : OSX server
# /System/Library/CoreServices/SystemVersion.plist : OSX standard

log=/tmp/wipha.log
date=$(date "+%d_%b_%Y-%H:%M:%S")

function test_error() {
    if [ $1 != "0" ]; then
        cat $log
        echo "... Abort ..."
        exit 1
    fi
}

function backupOnce() {
    backupFile=$1.bak_WiPha_$date
    if ! [ -f $backupFile ]; then
        cp $1 $backupFile  2>$log
        test_error $?
    fi
}

# Script is run with admin privileges (sudo) -> whoami=root
if [ -z "$USER" ]; then
    if [ -z "$LOGNAME" ]; then
        echo "Can't determine user (no USER or LOGNAME variable)"
        exit 1;
    else
        user=$LOGNAME
    fi
else
    user=$USER
fi

home="/Users/$user"
dest="$home/Sites"
src="$1"

if  ! [ -d "$dest" ]; then
    otherDest="$HOME/Sites"
    if [ -d "$otherDest" ]; then
        dest=$otherDest
    else
        echo "Can't find a correct destination for WiPhA. Tried:"
        echo "   - $dest"        
        if [ "$otherDest" != "$dest" ]; then
            echo "   - $otherDest"
        fi
        exit 1
    fi
fi

# Find out which version of OSX we run on
osver=`sw_vers | awk '/ProductVersion/ {print substr($2,0,4)}'`
case "$osver" in
    10.2 | 10.3 | 10.4 ) webserver="apache";;
    10.5 ) webserver="apache2";;
    10.6 ) webserver="apache2";;
    * ) echo "I don't know this OSX version: '$osver'"; exit 1;;
esac


unique=$(date "+%d_%b_%Y-%H_%M_%S")

if [ -e "$dest/wipha" ]; then
    ver=$(awk -F\" '/version/ {print $2}' "$dest/wipha/configs/wipha.conf")
    echo
    echo "Detected WiPhA installed version: $ver"
    if [ -e "$dest/wipha/data" ] && [[ "$ver" > "0.7" ]]; then
        echo
        echo "Saving previous WiPhA data"
        mv "$dest/wipha/data" "/tmp/data_$unique" 2> $log
        test_error $?
    else
        echo
        echo "Your previous preferences are too different from the current version preferences and won't be saved. Sorry."
    fi

    echo
    echo "Saving previous WiPhA config"
    mv "$dest/wipha/configs/wipha.conf" "/tmp/wipha.conf_$unique" 2> $log
    test_error $?
    echo
    echo "Moving old version of WiPhA to the trash"
    mv "$dest/wipha" "$home/.Trash/wipha_$unique" 2> $log
	test_error $?
fi

echo
echo "Decompacting WiPhA in your Sites folder ($dest)"
cd $dest
tar jxf "$src/Contents/Resources/wipha.tbz" 2> $log
test_error $?

echo
echo "Setting permissions on these files"
own=$(id -ur)
chown -Rh $own wipha 2> $log
test_error $?
grp=$(id -gr)
chgrp -Rh $grp wipha 2> $log
test_error $?
find wipha -type f | xargs -I @ chmod 644 "@"
find wipha -type d | xargs -I @ chmod 755 "@"
find wipha | xargs -I @ touch "@"   # force the browser cache to reload

echo
echo "Setting setuid bit ($user) on permission corrector executable"
# 4755 = -rwsr-xr-x (755 + setuid)
chmod 4755 wipha/changeperm 2> $log
test_error $?

if [ -e "/tmp/data_$unique" ]; then
    echo
    echo "Installing your previous WiPhA data"
    mv "$dest/wipha/data" "/tmp/data_empty_$unique" 2> $log
    test_error $?
    mv "/tmp/data_$unique" "$dest/wipha/data" 2> $log
    test_error $?
    rm -r "/tmp/data_empty_$unique"
    rm -f "$dest/wipha/data/cache/*.jpg"
fi

if [ -e "/tmp/wipha.conf_$unique" ]; then
    echo
    echo "Renaming your previous WiPhA config as wipha.conf.old"
    mv "/tmp/wipha.conf_$unique" "$dest/wipha/configs/wipha.conf.old" 2> $log
    test_error $?
fi

cd wipha

echo
echo "Grant write access to Apache on the WiPhA data directories"
# 3777 = drwxrwsrwt (777 + setgid + sticky)
chmod 3777 data 2> $log
test_error $?
chmod 3777 data/cache 2> $log
test_error $?

echo
echo " Remove WiPhA smarty cache files (/tmp/smarty/wipha)"
rm -rf /tmp/smarty/wipha
test_error $?

### Apache configuration ###
case "$webserver" in
    apache)  webserverconf="/etc/httpd/httpd.conf";;
    apache2) webserverconf="/etc/apache2/httpd.conf";;
esac

echo
echo "Configuring Apache to handle php"
cat $webserverconf | case "$webserver" in
    apache) awk ' \
/[ \t]*#[ \t]*LoadModule[ \t]+php4_module/ {print "# Following line uncommented by WiPha installer"; print "LoadModule php4_module", $3; next} \
/[ \t]*#[ \t]*AddModule[ \t]+mod_php4.c/ {print "# Following line uncommented by WiPha installer"; print "AddModule mod_php4.c"; next} \
{print $0} \
';;
    apache2) awk ' \
/[ \t]*#[ \t]*LoadModule[ \t]+php5_module/ {print "# Following line uncommented by WiPha installer"; print "LoadModule php5_module", $3; next} \
{print $0} \
';;
esac 1> /tmp/httpd.conf 2>$log
test_error $?
if [ "$(diff $webserverconf /tmp/httpd.conf)" != "" ]; then
    backupOnce $webserverconf
    # Why does mv hang ???? Let's replace it bt cp+rm
    # mv /tmp/httpd.conf $webserverconf  2>$log
    cp /tmp/httpd.conf $webserverconf  2>$log
    test_error $?
    rm /tmp/httpd.conf  2>$log
    test_error $?
else
    rm /tmp/httpd.conf
    echo "    Was already done"
fi

echo
echo "Configuring Apache to take wipha access protection in account (.htaccess)"
perl -n -e 'BEGIN {undef $/;} exit m%\n\s*<Directory\s+"'$dest/wipha'">\s*\n\s*AllowOverride\s+All\s*\n\s*</Directory>%' $webserverconf
if [ "$?" != "1" ]; then
    backupOnce $webserverconf
    cat << EOF 1>> $webserverconf 2> $log

# Following lines added by WiPha installer to take wipha .htaccess into account
<Directory "$dest/wipha">
    AllowOverride All
</Directory>
EOF
    test_error $?
else
    echo "    Was already done"
fi


rm $log

################################## TEST PART ################################
echo
echo "Checks..."
echo

err=0

echo -n "'sips': "
if [ -x "/usr/bin/sips" ]; then echo "ok"; else echo "KO ! (sips is required for the slideshow mode)"; err=1; fi

echo -n "'data' permission is drwxrwsrwt: "
stat=$(stat -f %Sp data)
if [ "$stat" == "drwxrwsrwt" ]; then echo "ok"; else echo "KO ! ($stat)"; err=1; fi

echo -n "'data/cache' permission is drwxrwsrwt: "
stat=$(stat -f %Sp data/cache)
if [ "$stat" == "drwxrwsrwt" ]; then echo "ok"; else echo "KO ! ($stat)"; err=1; fi

echo -n "'changeperm' permission is -rwsr-xr-x: "
stat=$(stat -f %Sp changeperm)
if [ "$stat" == "-rwsr-xr-x" ]; then echo "ok"; else echo "KO ! ($stat)"; err=1; fi

echo -n "smarty cache files removed: "
if [ ! -d "/tmp/smarty/wipha" ]; then echo "ok"; else echo "KO ! (Please delete /tmp/smarty/wipha to make sure wipha new html content is properly displayed)"; err=1; fi

case "$webserver" in
    apache)
        echo -n "OSX Standard PHP4 enabled: "
        load=$(grep -c -E "^[ \t]*LoadModule[ \t]+php4_module[ \t]+libexec/httpd/libphp4.so" $webserverconf)
        add=$(grep -c -E "^[ \t]*AddModule[ \t]+mod_php4.c" $webserverconf)
        if [ "$load" == "1" ] && [ "$add" == "1" ]; then echo "ok (unless other PHP versions also installed)"; else
            echo "KO !"; err=1
            echo "    You should have these 2 lines in $webserverconf:"
            echo "        LoadModule php4_module libexec/httpd/libphp4.so"
            echo "        AddModule mod_php4.c"
        fi
        ;;
    apache2)
        echo -n "OSX Standard PHP5 enabled: "
        load=$(grep -c -E "^[ \t]*LoadModule[ \t]+php5_module[ \t]+libexec/apache2/libphp5.so" $webserverconf)
        if [ "$load" == "1" ] ; then echo "ok (unless other PHP versions also installed)"; else
            echo "KO !"; err=1
            echo "    You should have this line in $webserverconf:"
            echo "        LoadModule php5_module libexec/apache2/libphp5.so"
        fi
        ;;
esac

echo -n "WiPhA access protection enabled (.htaccess): "
perl -n -e 'BEGIN {undef $/;} exit m%\n\s*<Directory\s+"'$dest/wipha'">\s*\n\s*AllowOverride\s+All\s*\n\s*</Directory>%' $webserverconf
if [ "$?" == "1" ]; then echo "ok"; else
    echo "KO !"; err=1
    echo "    You should have these 3 lines in $webserverconf:"
    echo '        <Directory "'$dest/wipha'">'
    echo '            AllowOverride All'
    echo '        </Directory>'
fi


################################## START ################################
if [ "$err" == "1" ]; then
    echo
    echo "Please correct this before using WiPhA."
else
    echo
    echo "Installation complete"
    echo
    echo

    echo "Getting rights to restart Apache server"
    cp "$src/Contents/Resources/apacheRestart" /tmp/ 2> $log
    test_error $?
    chown root /tmp/apacheRestart 2> $log
    test_error $?
    chmod 4755 /tmp/apacheRestart 2> $log
    test_error $?

    echo "Re-starting Apache server"
    /tmp/apacheRestart
    rm /tmp/apacheRestart

    echo "Wait 5 secondes"
    sleep 5

    echo "Your browser should now open the WiPha login page (please bookmark this page for future use)."
    open "http://localhost/~$user/wipha"
fi
